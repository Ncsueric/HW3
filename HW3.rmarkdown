---
title: "hw3"
format: html
editor: visual
---


## Task 1: Conceptual Questions

1.  If your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?

"../MyData.csv"

2.  What are the major benefits of using R projects?

R projects automatically set the working directory to the project's root, which helps in maintaining a consistent and organized directory structure.

3.  What is git and what is github?
Git is a distributed version control system (VCS) designed to track changes in source code during software development. 
GitHub is a web-based platform built around Git, offering additional features for collaborative software development and project management. 

4.  What are the two main differences between a tibble and a data.frame?
fancy printing and they do not coerce down to a vector when you subset to only one column using  for tibble 
5.  Rewrite the following nested function call using baseRâ€™s chaining operator: arrange(filter(select(as_tibble(iris), starts_with("Petal"), Species), Petal.Length \< 1.55), Species)

as_tibble(iris) |>
  select(starts_with("Petal"), Species) |>
  filter(Petal.Length < 1.55) |>
  arrange(Species)

6.  What is meant by long format data and wide format data? Which do we generally prefer for statistical analysis?
long format: each row consists of one observation and each column one variable.
wide format : we may have more than one observation in a given row.

long form

## Task 2 Reading Delimited Data

### Glass data

1.  


```{r}
library(tidyverse)
```

```{r}
glass <- read_csv("https://www4.stat.ncsu.edu/~online/datasets/glass.data",
                  col_names = c("Id", "RI", "Na", "Mg", "Al", "Si","K","Ca","Ba","Fe","Type_of_Glass"))
glass
```


2.  


```{r}
glass<- glass |>
  mutate(Type_of_Glass1 = case_when(
    Type_of_Glass == 1 ~ "building_windows_float_processed",
    Type_of_Glass == 2 ~ "building_windows_non_float_processed",
    Type_of_Glass == 3 ~ "vehicle_windows_float_processed",
    Type_of_Glass == 4 ~ "vehicle_windows_non_float_processed",
    Type_of_Glass == 5 ~ "containers",
    Type_of_Glass == 6 ~ "tableware",
    Type_of_Glass == 7 ~ "headlamps"
  ))

glass
```


3.  


```{r}
glass_filtered <- glass |>
  filter(Fe < 0.2 & (Type_of_Glass1 == "tableware" | Type_of_Glass1 == "headlamps"))
glass_filtered
```


### Yeast data

1.  


```{r}
yeast <- read_table("https://www4.stat.ncsu.edu/~online/datasets/yeast.data",
                  col_names = c("seq_name", "mcg", "gvh", "alm", "mit", "erl","pox","vac","nuc","class"))
yeast
```


2.  


```{r}
yeast_s<- yeast|>
  select(-c(seq_name, nuc))
yeast_s
```


3.  


```{r}
yeast_d<- yeast|>
  select(-c(seq_name, nuc))|>
  group_by(class)|>
  mutate(across(c(mcg, gvh, alm, mit, erl, pox, vac), 
                list(mean = ~ mean(.), median = ~ median(.)),
                .names = "{.col}_{.fn}"))

yeast_d
```


## Task 2: Combining Excel and Delimited Data

1.  


```{r}
library(readxl)
library(dplyr)
```

```{r}
white_wine <- read_excel("white-wine.xlsx", 
                            sheet = excel_sheets("white-wine.xlsx")[1])
white_wine
```


2.  


```{r}
white_wine2 <- read_excel("white-wine.xlsx", 
                            sheet = excel_sheets("white-wine.xlsx")[2])
white_wine2
```

```{r}
white_wine3 <- read_excel("white-wine.xlsx", sheet = excel_sheets("white-wine.xlsx")[1])

colnames(white_wine3) <- c("fixed_acidity", "volatile_acidity", "citric_acid", "residual_sugar", 
                           "chlorides", "free_sulfur_dioxide", "total_sulfur_dioxide", 
                           "density", "pH", "sulphates", "alcohol", "quality")
white_wine3
```


3


```{r}
white_wine4 <- white_wine3 |>
  mutate(wine = "white")
white_wine4
```


4


```{r}
library(readr)

red_wine <- read_delim("red-wine.csv", delim=";")


colnames(red_wine) <- c("fixed_acidity", "volatile_acidity", "citric_acid", "residual_sugar", 
                           "chlorides", "free_sulfur_dioxide", "total_sulfur_dioxide", 
                           "density", "pH", "sulphates", "alcohol", "quality")
red_wine1 <- red_wine |>
  mutate(wine="red")

red_wine1
```


5


```{r}
combine <- dplyr::bind_rows(white_wine4,red_wine1)
combine
```


6.7.8.9


```{r}
combine1 <- combine |>
  filter(quality > 6.5 & alcohol < 132)|>
  arrange(quality)|>
  select(contains("acid"), alcohol, wine, quality)|>
  group_by(quality)|>
  mutate(al_mean=mean(alcohol),al_sd=sd(alcohol))
combine1
```


## Task 3: Database Practice


```{r}

library(DBI)
library(RSQLite)
```


1.  


```{r}
con <- dbConnect(RSQLite::SQLite(), "lahman.db")

dbListTables(con)
```


2.  


```{r}
tbl(con, "Teams")
tbl(con, "Teams") |>
  filter(yearID == 2015) 
```


3


```{r}
tbl(con, sql(
"SELECT *
FROM `Teams`
WHERE (`yearID` = 2015)")
)
```


4.  


```{r}
x <- tbl(con, "HallOfFame")|>
  select('playerID','yearID','category')
x
```


5.  


```{r}
n5 <- left_join(x,
          tbl(con, "People")|>select(playerID,nameFirst,nameLast),
          by=join_by(playerID==playerID))|>
  collect()
n5
```


6.  


```{r}
n6<-tbl(con, "Managers") |>
 select(playerID,G,W,L) |>
 group_by(playerID) |>
 summarize(G_managed = sum(G, na.rm = TRUE),
           Total_W = sum(W, na.rm = TRUE),
           Total_L = sum(L, na.rm = TRUE))|>
  mutate(perc=Total_W/G_managed)|>
  arrange(desc(perc))|>
collect()
n6
```


7.  


```{r}
 inner_join(n5,
            n6,
            by=join_by(playerID==playerID))|>
  collect()
```

